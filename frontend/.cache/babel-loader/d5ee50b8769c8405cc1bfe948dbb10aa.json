{"ast":null,"code":"var _jsxFileName = \"/app/src/components/MainContent.js\";\nimport React, { Component } from 'react';\nimport { saveAs } from 'file-saver';\nimport '../App.css';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\n\nclass MainContent extends Component {\n  constructor() {\n    super();\n\n    this.handleDoNLP = () => {\n      this.state.doNLP ? this.setState({\n        doNLP: false\n      }) : this.setState({\n        doNLP: true\n      });\n    };\n\n    this.handleTableOfContents = () => {\n      this.state.makeTableOfContents ? this.setState({\n        makeTableOfContents: false\n      }) : this.setState({\n        makeTableOfContents: true\n      });\n    };\n\n    this.handleFTPLinks = () => {\n      this.state.convertFTPLinks ? this.setState({\n        convertFTPLinks: false\n      }) : this.setState({\n        convertFTPLinks: true\n      });\n    };\n\n    this.handleCSSType = type => {\n      this.setState({\n        cssType: type.target.value\n      });\n    };\n\n    this.handleShowModal = modalName => {\n      this.setState({\n        [modalName]: true\n      });\n    };\n\n    this.closeModal = modalName => {\n      this.setState({\n        [modalName]: false\n      });\n    };\n\n    this.LoadingSpinner = () => {\n      return this.state.isLoading ? React.createElement(Spinner, {\n        className: \"ml-2\",\n        animation: \"border\",\n        variant: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }) : '';\n    };\n\n    this.saveWithoutEdits = () => {\n      const blob = new Blob([this.state.html], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      saveAs(blob, this.state.filename);\n    };\n\n    this.addErrorFileName = filename => {\n      let filenamelist = this.state.fileUploadErrorList;\n      filenamelist.push(filename);\n      this.setState({\n        fileUploadErrorList: filenamelist\n      });\n    };\n\n    this.decCount = () => {\n      let c = this.state.count;\n      c--;\n      return this.setState({\n        count: c\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.setState({\n        isLoading: true\n      });\n      this.setState({\n        wrongFileTypeError: false\n      });\n      this.setState({\n        submitError: false\n      });\n      this.setState({\n        fileUploadErrorList: []\n      }); // handle user not selecting a file\n\n      if (this.uploadInput.files[0]) {\n        this.setState({\n          fileSelectedError: false\n        });\n      } else {\n        this.setState({\n          isLoading: false\n        });\n        this.setState({\n          fileSelectedError: true\n        });\n        return;\n      } // handle multiple file uploads at once\n\n\n      let fileslist = this.uploadInput.files;\n      this.setState({\n        count: fileslist.length\n      }); // check file type - show error and skip file if not a docx\n\n      for (let i = 0; i < fileslist.length; i++) {\n        if (this.uploadInput.files[i].name.split('.').pop() !== 'docx') {\n          this.setState({\n            wrongFileTypeError: true\n          });\n          this.setState({\n            isLoading: false\n          });\n          return;\n        }\n      } // loop through each file and POST to server\n\n\n      for (let i = 0; i < fileslist.length; i++) {\n        // prepare data\n        const data = new FormData();\n        let uploadFileName = this.uploadInput.files[i].name;\n        let newFileName = uploadFileName.split('.').slice(0, -1).join('.');\n        newFileName = newFileName + '.html';\n        data.append('file', this.uploadInput.files[i]);\n        data.append('onlybootstrap', false);\n        this.state.doNLP ? data.append('donlp', true) : data.append('donlp', false);\n        this.state.makeTableOfContents ? data.append('toc', true) : data.append('toc', false);\n        this.state.convertFTPLinks ? data.append('ftp', true) : data.append('ftp', false);\n        data.append('csstype', this.state.cssType); // make api call - POST req - to the server \n\n        fetch('http://localhost:8082/', {\n          method: 'POST',\n          body: data\n        }).then(response => {\n          return response.json();\n        }).then(data => {\n          this.setState({\n            submitError: false\n          });\n          this.setState({\n            html: data\n          }); // handle any converter errors\n\n          if (this.state.html === 'error') {\n            this.decCount();\n            this.addErrorFileName(this.uploadInput.files[i].name);\n            this.setState({\n              submitError: true\n            });\n            return;\n          }\n\n          this.setState({\n            filename: newFileName\n          });\n          this.decCount();\n          this.saveWithoutEdits();\n        }).catch(err => {\n          this.decCount();\n          this.addErrorFileName(this.uploadInput.files[i].name);\n          this.setState({\n            submitError: true\n          });\n          return;\n        }).finally(() => {\n          if (this.state.count === 0) {\n            this.setState({\n              isLoading: false\n            });\n          }\n        });\n      }\n    };\n\n    this.state = {\n      html: '',\n      filename: '',\n      doNLP: false,\n      makeTableOfContents: false,\n      convertFTPLinks: false,\n      submitError: false,\n      fileSelectedError: false,\n      wrongFileTypeError: false,\n      tocModal: false,\n      ftpModal: false,\n      nlpModal: false,\n      isLoading: false,\n      fileUploadErrorList: [],\n      count: 0,\n      cssType: 'bootstrap'\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      className: \"text-left mt-5 mb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col ml-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"errorStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.state.submitError ? 'Oops! Something went wrong' : ''), React.createElement(\"p\", {\n      className: \"errorStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, this.state.fileUploadErrorList.length > 1 ? this.state.fileUploadErrorList.length + ' files were not converted' : ''), React.createElement(\"p\", {\n      className: \"errorStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, this.state.fileUploadErrorList.length === 1 ? this.state.fileUploadErrorList.length + ' file was not converted' : ''), React.createElement(\"p\", {\n      className: \"errorStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, this.state.fileSelectedError ? 'Oops! Please select a file' : ''), React.createElement(\"p\", {\n      className: \"errorStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, this.state.wrongFileTypeError ? 'Oops! Wrong file type. Only DOCX files are permitted' : '')), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"my-1\",\n      ref: ref => {\n        this.uploadInput = ref;\n      },\n      type: \"file\",\n      accept: \".docx\",\n      multiple: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(this.LoadingSpinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-check my-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      className: \"form-check-input\",\n      onClick: this.handleTableOfContents,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"form-check-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Create Table of Contents\"), React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-info-circle fa-lg ml-2 text-info\",\n      onClick: () => this.handleShowModal('tocModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }))), React.createElement(Modal, {\n      show: this.state.tocModal,\n      onHide: () => this.closeModal('tocModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Create Table of Contents\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Creates a new Table of Contents from all of the header sections. Dynamically creates hyperlinks to each header section so the user can jump to sections.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), \"If the docx file does not have any Header 1 or Header 2 sections specified, no table of contents will be made.\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: () => this.closeModal('tocModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Close\"))))), React.createElement(\"div\", {\n      className: \"form-check my-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      className: \"form-check-input\",\n      onClick: this.handleFTPLinks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"form-check-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Convert FTP Links to Drive\"), React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-info-circle fa-lg ml-2 text-info\",\n      onClick: () => this.handleShowModal('ftpModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }))), React.createElement(Modal, {\n      show: this.state.ftpModal,\n      onHide: () => this.closeModal('ftpModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Convert FTP Links to Drive\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"Converts all FTP links to the corresponding drive link. Updates both the href and the visible link on the web page.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), \"Does not convert any other references to FTP in the document outside of hyperlinks.\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: () => this.closeModal('ftpModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Close\"))))), React.createElement(\"div\", {\n      className: \"form-check my-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      className: \"form-check-input\",\n      onClick: this.handleDoNLP,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"form-check-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Natural Language Processing\"), React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-info-circle fa-lg ml-2 text-info\",\n      onClick: () => this.handleShowModal('nlpModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }))), React.createElement(Modal, {\n      show: this.state.nlpModal,\n      onHide: () => this.closeModal('nlpModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Natural Language Processing\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Runs various Natural Langage Processing algorithms to dynamically change content in the document.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), \"Can change header section titles based on a list of keywords or phrases specified.\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: () => this.closeModal('nlpModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Close\"))))), React.createElement(\"div\", {\n      className: \"form-check my-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      onChange: event => this.handleCSSType(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      value: \"bootstrap\",\n      name: \"cssStyle\",\n      defaultChecked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), \" Bootstrap CSS\", React.createElement(\"input\", {\n      className: \"ml-3\",\n      type: \"radio\",\n      value: \"podaac\",\n      name: \"cssStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }), \" PODAAC CSS (beta)\", React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-info-circle fa-lg ml-2 text-info\",\n      onClick: () => this.handleShowModal('cssModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    })))), React.createElement(Modal, {\n      show: this.state.cssModal,\n      onHide: () => this.closeModal('cssModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"CSS Styling\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Choose between Bootstrap 4 or PODAAC CSS styling.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"Bootstrap\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), \"Adds header and footer. Adds bootstrap styling to img tags, table tags and adds a container tag. Adds link to Bootstrap CDN.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"PODAAC\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }), \"Adds header and footer. Adds links to all PODAAC CSS stylesheets.\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: () => this.closeModal('cssModal'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Close\")))), React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, this.state.isLoading ? 'Loading...' : 'Upload')))));\n  }\n\n}\n\nexport default MainContent;","map":{"version":3,"sources":["/app/src/components/MainContent.js"],"names":["React","Component","saveAs","Modal","Button","Spinner","MainContent","constructor","handleDoNLP","state","doNLP","setState","handleTableOfContents","makeTableOfContents","handleFTPLinks","convertFTPLinks","handleCSSType","type","cssType","target","value","handleShowModal","modalName","closeModal","LoadingSpinner","isLoading","saveWithoutEdits","blob","Blob","html","filename","addErrorFileName","filenamelist","fileUploadErrorList","push","decCount","c","count","handleSubmit","event","preventDefault","wrongFileTypeError","submitError","uploadInput","files","fileSelectedError","fileslist","length","i","name","split","pop","data","FormData","uploadFileName","newFileName","slice","join","append","fetch","method","body","then","response","json","catch","err","finally","tocModal","ftpModal","nlpModal","render","ref","cssModal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,OAAP,MAAoB,yBAApB;;AAEA,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAChCM,EAAAA,WAAW,GAAG;AACV;;AADU,SAsBdC,WAtBc,GAsBA,MAAM;AAChB,WAAKC,KAAL,CAAWC,KAAX,GAAmB,KAAKC,QAAL,CAAc;AAAED,QAAAA,KAAK,EAAE;AAAT,OAAd,CAAnB,GAAqD,KAAKC,QAAL,CAAc;AAAED,QAAAA,KAAK,EAAE;AAAT,OAAd,CAArD;AACH,KAxBa;;AAAA,SA0BdE,qBA1Bc,GA0BU,MAAM;AAC1B,WAAKH,KAAL,CAAWI,mBAAX,GAAiC,KAAKF,QAAL,CAAc;AAAEE,QAAAA,mBAAmB,EAAE;AAAvB,OAAd,CAAjC,GAAiF,KAAKF,QAAL,CAAc;AAAEE,QAAAA,mBAAmB,EAAE;AAAvB,OAAd,CAAjF;AACH,KA5Ba;;AAAA,SA8BdC,cA9Bc,GA8BG,MAAM;AACnB,WAAKL,KAAL,CAAWM,eAAX,GAA6B,KAAKJ,QAAL,CAAc;AAAEI,QAAAA,eAAe,EAAE;AAAnB,OAAd,CAA7B,GAAyE,KAAKJ,QAAL,CAAc;AAAEI,QAAAA,eAAe,EAAE;AAAnB,OAAd,CAAzE;AACH,KAhCa;;AAAA,SAmCdC,aAnCc,GAmCGC,IAAD,IAAU;AACtB,WAAKN,QAAL,CAAc;AAAEO,QAAAA,OAAO,EAAED,IAAI,CAACE,MAAL,CAAYC;AAAvB,OAAd;AACH,KArCa;;AAAA,SAwCdC,eAxCc,GAwCKC,SAAD,IAAe;AAC7B,WAAKX,QAAL,CAAc;AAAE,SAACW,SAAD,GAAa;AAAf,OAAd;AACH,KA1Ca;;AAAA,SA4CdC,UA5Cc,GA4CAD,SAAD,IAAe;AACxB,WAAKX,QAAL,CAAc;AAAE,SAACW,SAAD,GAAa;AAAf,OAAd;AACH,KA9Ca;;AAAA,SAiDdE,cAjDc,GAiDG,MAAM;AACnB,aAAO,KAAKf,KAAL,CAAWgB,SAAX,GAAuB,oBAAC,OAAD;AAAS,QAAA,SAAS,EAAC,MAAnB;AAA0B,QAAA,SAAS,EAAC,QAApC;AAA6C,QAAA,OAAO,EAAC,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAvB,GAA2F,EAAlG;AACH,KAnDa;;AAAA,SAsDdC,gBAtDc,GAsDK,MAAM;AACrB,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,KAAKnB,KAAL,CAAWoB,IAAZ,CAAT,EAA4B;AAAEZ,QAAAA,IAAI,EAAE;AAAR,OAA5B,CAAb;AACAf,MAAAA,MAAM,CAACyB,IAAD,EAAO,KAAKlB,KAAL,CAAWqB,QAAlB,CAAN;AACH,KAzDa;;AAAA,SA4DdC,gBA5Dc,GA4DMD,QAAD,IAAc;AAC7B,UAAIE,YAAY,GAAG,KAAKvB,KAAL,CAAWwB,mBAA9B;AACAD,MAAAA,YAAY,CAACE,IAAb,CAAkBJ,QAAlB;AACA,WAAKnB,QAAL,CAAc;AAAEsB,QAAAA,mBAAmB,EAAED;AAAvB,OAAd;AACH,KAhEa;;AAAA,SAmEdG,QAnEc,GAmEH,MAAM;AACb,UAAIC,CAAC,GAAG,KAAK3B,KAAL,CAAW4B,KAAnB;AACAD,MAAAA,CAAC;AACD,aAAO,KAAKzB,QAAL,CAAc;AAAE0B,QAAAA,KAAK,EAAED;AAAT,OAAd,CAAP;AACH,KAvEa;;AAAA,SA0EdE,YA1Ec,GA0EEC,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAK7B,QAAL,CAAc;AAAEc,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,WAAKd,QAAL,CAAc;AAAE8B,QAAAA,kBAAkB,EAAE;AAAtB,OAAd;AACA,WAAK9B,QAAL,CAAc;AAAE+B,QAAAA,WAAW,EAAE;AAAf,OAAd;AACA,WAAK/B,QAAL,CAAc;AAAEsB,QAAAA,mBAAmB,EAAE;AAAvB,OAAd,EALsB,CAOtB;;AACA,UAAI,KAAKU,WAAL,CAAiBC,KAAjB,CAAuB,CAAvB,CAAJ,EAA+B;AAC3B,aAAKjC,QAAL,CAAc;AAAEkC,UAAAA,iBAAiB,EAAE;AAArB,SAAd;AACH,OAFD,MAEO;AACH,aAAKlC,QAAL,CAAc;AAAEc,UAAAA,SAAS,EAAE;AAAb,SAAd;AACA,aAAKd,QAAL,CAAc;AAAEkC,UAAAA,iBAAiB,EAAE;AAArB,SAAd;AACA;AACH,OAdqB,CAgBtB;;;AACA,UAAIC,SAAS,GAAG,KAAKH,WAAL,CAAiBC,KAAjC;AACA,WAAKjC,QAAL,CAAc;AAAE0B,QAAAA,KAAK,EAAES,SAAS,CAACC;AAAnB,OAAd,EAlBsB,CAoBtB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACC,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AACvC,YAAI,KAAKL,WAAL,CAAiBC,KAAjB,CAAuBI,CAAvB,EAA0BC,IAA1B,CAA+BC,KAA/B,CAAqC,GAArC,EAA0CC,GAA1C,OAAoD,MAAxD,EAAgE;AAC5D,eAAKxC,QAAL,CAAc;AAAE8B,YAAAA,kBAAkB,EAAE;AAAtB,WAAd;AACA,eAAK9B,QAAL,CAAc;AAAEc,YAAAA,SAAS,EAAE;AAAb,WAAd;AACA;AACH;AACJ,OA3BqB,CA6BtB;;;AACA,WAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACC,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AACvC;AACA,cAAMI,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACA,YAAIC,cAAc,GAAG,KAAKX,WAAL,CAAiBC,KAAjB,CAAuBI,CAAvB,EAA0BC,IAA/C;AACA,YAAIM,WAAW,GAAGD,cAAc,CAACJ,KAAf,CAAqB,GAArB,EAA0BM,KAA1B,CAAgC,CAAhC,EAAmC,CAAC,CAApC,EAAuCC,IAAvC,CAA4C,GAA5C,CAAlB;AACAF,QAAAA,WAAW,GAAGA,WAAW,GAAG,OAA5B;AACAH,QAAAA,IAAI,CAACM,MAAL,CAAY,MAAZ,EAAoB,KAAKf,WAAL,CAAiBC,KAAjB,CAAuBI,CAAvB,CAApB;AACAI,QAAAA,IAAI,CAACM,MAAL,CAAY,eAAZ,EAA6B,KAA7B;AACA,aAAKjD,KAAL,CAAWC,KAAX,GAAmB0C,IAAI,CAACM,MAAL,CAAY,OAAZ,EAAqB,IAArB,CAAnB,GAAgDN,IAAI,CAACM,MAAL,CAAY,OAAZ,EAAqB,KAArB,CAAhD;AACA,aAAKjD,KAAL,CAAWI,mBAAX,GAAiCuC,IAAI,CAACM,MAAL,CAAY,KAAZ,EAAmB,IAAnB,CAAjC,GAA4DN,IAAI,CAACM,MAAL,CAAY,KAAZ,EAAmB,KAAnB,CAA5D;AACA,aAAKjD,KAAL,CAAWM,eAAX,GAA6BqC,IAAI,CAACM,MAAL,CAAY,KAAZ,EAAmB,IAAnB,CAA7B,GAAwDN,IAAI,CAACM,MAAL,CAAY,KAAZ,EAAmB,KAAnB,CAAxD;AACAN,QAAAA,IAAI,CAACM,MAAL,CAAY,SAAZ,EAAuB,KAAKjD,KAAL,CAAWS,OAAlC,EAXuC,CAavC;;AACAyC,QAAAA,KAAK,CAAC,wBAAD,EAA2B;AAC5BC,UAAAA,MAAM,EAAE,MADoB;AAE5BC,UAAAA,IAAI,EAAET;AAFsB,SAA3B,CAAL,CAGGU,IAHH,CAGSC,QAAD,IAAc;AAClB,iBAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,SALD,EAKGF,IALH,CAKSV,IAAD,IAAU;AACd,eAAKzC,QAAL,CAAc;AAAE+B,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA,eAAK/B,QAAL,CAAc;AAAEkB,YAAAA,IAAI,EAAEuB;AAAR,WAAd,EAFc,CAId;;AACA,cAAI,KAAK3C,KAAL,CAAWoB,IAAX,KAAoB,OAAxB,EAAiC;AAC7B,iBAAKM,QAAL;AACA,iBAAKJ,gBAAL,CAAsB,KAAKY,WAAL,CAAiBC,KAAjB,CAAuBI,CAAvB,EAA0BC,IAAhD;AACA,iBAAKtC,QAAL,CAAc;AAAE+B,cAAAA,WAAW,EAAE;AAAf,aAAd;AACA;AACH;;AAED,eAAK/B,QAAL,CAAc;AAAEmB,YAAAA,QAAQ,EAAEyB;AAAZ,WAAd;AACA,eAAKpB,QAAL;AACA,eAAKT,gBAAL;AACH,SApBD,EAoBGuC,KApBH,CAoBUC,GAAD,IAAS;AACd,eAAK/B,QAAL;AACA,eAAKJ,gBAAL,CAAsB,KAAKY,WAAL,CAAiBC,KAAjB,CAAuBI,CAAvB,EAA0BC,IAAhD;AACA,eAAKtC,QAAL,CAAc;AAAE+B,YAAAA,WAAW,EAAE;AAAf,WAAd;AACA;AACH,SAzBD,EAyBGyB,OAzBH,CAyBW,MAAM;AACb,cAAI,KAAK1D,KAAL,CAAW4B,KAAX,KAAqB,CAAzB,EAA4B;AACxB,iBAAK1B,QAAL,CAAc;AAACc,cAAAA,SAAS,EAAE;AAAZ,aAAd;AACH;AACJ,SA7BD;AA8BH;AACJ,KArJa;;AAGV,SAAKhB,KAAL,GAAa;AACToB,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,QAAQ,EAAE,EAFD;AAGTpB,MAAAA,KAAK,EAAE,KAHE;AAITG,MAAAA,mBAAmB,EAAE,KAJZ;AAKTE,MAAAA,eAAe,EAAE,KALR;AAMT2B,MAAAA,WAAW,EAAE,KANJ;AAOTG,MAAAA,iBAAiB,EAAE,KAPV;AAQTJ,MAAAA,kBAAkB,EAAE,KARX;AAST2B,MAAAA,QAAQ,EAAE,KATD;AAUTC,MAAAA,QAAQ,EAAE,KAVD;AAWTC,MAAAA,QAAQ,EAAE,KAXD;AAYT7C,MAAAA,SAAS,EAAE,KAZF;AAaTQ,MAAAA,mBAAmB,EAAE,EAbZ;AAcTI,MAAAA,KAAK,EAAE,CAdE;AAeTnB,MAAAA,OAAO,EAAE;AAfA,KAAb;AAiBH;;AAmIDqD,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,qBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,QAAQ,EAAE,KAAKjC,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAK7B,KAAL,CAAWiC,WAAX,GAAyB,4BAAzB,GAAwD,EAAnF,CADJ,EAEI;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAKjC,KAAL,CAAWwB,mBAAX,CAA+Bc,MAA/B,GAAwC,CAAxC,GAA4C,KAAKtC,KAAL,CAAWwB,mBAAX,CAA+Bc,MAA/B,GAAwC,2BAApF,GAAkH,EAA7I,CAFJ,EAGI;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAKtC,KAAL,CAAWwB,mBAAX,CAA+Bc,MAA/B,KAA0C,CAA1C,GAA8C,KAAKtC,KAAL,CAAWwB,mBAAX,CAA+Bc,MAA/B,GAAwC,yBAAtF,GAAkH,EAA7I,CAHJ,EAII;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAKtC,KAAL,CAAWoC,iBAAX,GAA+B,4BAA/B,GAA8D,EAAzF,CAJJ,EAKI;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAKpC,KAAL,CAAWgC,kBAAX,GAAgC,sDAAhC,GAAyF,EAApH,CALJ,CADJ,EAQI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,SAAS,EAAC,MAAjB;AAAwB,MAAA,GAAG,EAAG+B,GAAD,IAAS;AAAE,aAAK7B,WAAL,GAAmB6B,GAAnB;AAAyB,OAAjE;AAAmE,MAAA,IAAI,EAAC,MAAxE;AAA+E,MAAA,MAAM,EAAC,OAAtF;AAA8F,MAAA,QAAQ,MAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,yBAAM,cAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CARJ,EAaI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,SAAS,EAAC,kBAAjC;AAAoD,MAAA,OAAO,EAAE,KAAK5D,qBAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK;AAAG,MAAA,SAAS,EAAC,wCAAb;AAAsD,MAAA,OAAO,EAAE,MAAM,KAAKS,eAAL,CAAqB,UAArB,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CAHJ,CADJ,EAMI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAKZ,KAAL,CAAW2D,QAAxB;AAAkC,MAAA,MAAM,EAAE,MAAM,KAAK7C,UAAL,CAAgB,UAAhB,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,CADJ,EAII,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mKAGQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHR,EAGiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHjB,mHAJJ,EAUI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,OAAO,EAAE,MAAM,KAAKA,UAAL,CAAgB,UAAhB,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CAVJ,CANJ,CADJ,CAbJ,EAuCI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,SAAS,EAAC,kBAAjC;AAAoD,MAAA,OAAO,EAAE,KAAKT,cAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK;AAAG,MAAA,SAAS,EAAC,wCAAb;AAAsD,MAAA,OAAO,EAAE,MAAM,KAAKO,eAAL,CAAqB,UAArB,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CAHJ,CADJ,EAMI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAKZ,KAAL,CAAW4D,QAAxB;AAAkC,MAAA,MAAM,EAAE,MAAM,KAAK9C,UAAL,CAAgB,UAAhB,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,CADJ,EAII,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8HAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAGa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHb,wFAJJ,EAUI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,OAAO,EAAE,MAAM,KAAKA,UAAL,CAAgB,UAAhB,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CAVJ,CANJ,CADJ,CAvCJ,EAiEI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,SAAS,EAAC,kBAAjC;AAAoD,MAAA,OAAO,EAAE,KAAKf,WAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK;AAAG,MAAA,SAAS,EAAC,wCAAb;AAAsD,MAAA,OAAO,EAAE,MAAM,KAAKa,eAAL,CAAqB,UAArB,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CAHJ,CADJ,EAMI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAKZ,KAAL,CAAW6D,QAAxB;AAAkC,MAAA,MAAM,EAAE,MAAM,KAAK/C,UAAL,CAAgB,UAAhB,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,CADJ,EAII,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4GAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAEa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFb,uFAJJ,EASI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,OAAO,EAAE,MAAM,KAAKA,UAAL,CAAgB,UAAhB,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CATJ,CANJ,CADJ,CAjEJ,EA0FI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,QAAQ,EAAEgB,KAAK,IAAI,KAAKvB,aAAL,CAAmBuB,KAAnB,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,KAAK,EAAC,WAA1B;AAAsC,MAAA,IAAI,EAAC,UAA3C;AAAsD,MAAA,cAAc,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,oBAEI;AAAO,MAAA,SAAS,EAAC,MAAjB;AAAwB,MAAA,IAAI,EAAC,OAA7B;AAAqC,MAAA,KAAK,EAAC,QAA3C;AAAoD,MAAA,IAAI,EAAC,UAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,wBAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK;AAAG,MAAA,SAAS,EAAC,wCAAb;AAAsD,MAAA,OAAO,EAAE,MAAM,KAAKlB,eAAL,CAAqB,UAArB,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CAHJ,CADJ,CADJ,EAQI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAKZ,KAAL,CAAWgE,QAAxB;AAAkC,MAAA,MAAM,EAAE,MAAM,KAAKlD,UAAL,CAAgB,UAAhB,CAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CADJ,EAII,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAEa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFb,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHJ,EAGoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHpB,kIAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAKa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALb,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,EAMiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANjB,sEAJJ,EAaI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,OAAO,EAAE,MAAM,KAAKA,UAAL,CAAgB,UAAhB,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CAbJ,CARJ,CA1FJ,EAsHI;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqC,KAAKd,KAAL,CAAWgB,SAAX,GAAuB,YAAvB,GAAsC,QAA3E,CAtHJ,CADJ,CADJ,CAFJ,CADJ;AAiIH;;AA1R+B;;AA6RpC,eAAenB,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport { saveAs } from 'file-saver'\nimport '../App.css';\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner'\n\nclass MainContent extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            html: '',\n            filename: '',\n            doNLP: false,\n            makeTableOfContents: false,\n            convertFTPLinks: false,\n            submitError: false,\n            fileSelectedError: false,\n            wrongFileTypeError: false,\n            tocModal: false,\n            ftpModal: false,\n            nlpModal: false,\n            isLoading: false,\n            fileUploadErrorList: [],\n            count: 0,\n            cssType: 'bootstrap',\n        }\n    }\n\n    handleDoNLP = () => {\n        this.state.doNLP ? this.setState({ doNLP: false }) : this.setState({ doNLP: true })\n    }\n\n    handleTableOfContents = () => {\n        this.state.makeTableOfContents ? this.setState({ makeTableOfContents: false }) : this.setState({ makeTableOfContents: true })\n    }\n\n    handleFTPLinks = () => {\n        this.state.convertFTPLinks ? this.setState({ convertFTPLinks: false }) : this.setState({ convertFTPLinks: true })\n    }\n\n    // sets css type the user chooses from the radio buttons\n    handleCSSType = (type) => {\n        this.setState({ cssType: type.target.value})\n    }\n\n    // handle modal show and close\n    handleShowModal = (modalName) => {\n        this.setState({ [modalName]: true })\n    }\n\n    closeModal = (modalName) => {\n        this.setState({ [modalName]: false })\n    }\n\n    // handles loading spinner\n    LoadingSpinner = () => {\n        return this.state.isLoading ? <Spinner className=\"ml-2\" animation=\"border\" variant=\"success\" /> : ''\n    }\n\n    // saves html file to users computer\n    saveWithoutEdits = () => {\n        const blob = new Blob([this.state.html], { type: \"text/plain;charset=utf-8\" })\n        saveAs(blob, this.state.filename)\n    }\n\n    // adds filename of file that wasn't converted/errored to error message\n    addErrorFileName = (filename) => {\n        let filenamelist = this.state.fileUploadErrorList\n        filenamelist.push(filename)\n        this.setState({ fileUploadErrorList: filenamelist})\n    }\n\n    // decrement count for isLoading in .finally()\n    decCount = () => {\n        let c = this.state.count\n        c--\n        return this.setState({ count: c })\n    }\n\n    // docx form submit - POST request to server\n    handleSubmit = (event) => {\n        event.preventDefault()\n        this.setState({ isLoading: true })\n        this.setState({ wrongFileTypeError: false })\n        this.setState({ submitError: false})\n        this.setState({ fileUploadErrorList: []})\n\n        // handle user not selecting a file\n        if (this.uploadInput.files[0]) {\n            this.setState({ fileSelectedError: false })\n        } else {\n            this.setState({ isLoading: false })\n            this.setState({ fileSelectedError: true })\n            return\n        }\n\n        // handle multiple file uploads at once\n        let fileslist = this.uploadInput.files\n        this.setState({ count: fileslist.length })\n\n        // check file type - show error and skip file if not a docx\n        for (let i = 0; i < fileslist.length; i++) {\n            if (this.uploadInput.files[i].name.split('.').pop() !== 'docx') {\n                this.setState({ wrongFileTypeError: true })\n                this.setState({ isLoading: false })\n                return\n            }\n        }\n\n        // loop through each file and POST to server\n        for (let i = 0; i < fileslist.length; i++) {\n            // prepare data\n            const data = new FormData();\n            let uploadFileName = this.uploadInput.files[i].name\n            let newFileName = uploadFileName.split('.').slice(0, -1).join('.')\n            newFileName = newFileName + '.html'\n            data.append('file', this.uploadInput.files[i])\n            data.append('onlybootstrap', false)\n            this.state.doNLP ? data.append('donlp', true) : data.append('donlp', false)\n            this.state.makeTableOfContents ? data.append('toc', true) : data.append('toc', false)\n            this.state.convertFTPLinks ? data.append('ftp', true) : data.append('ftp', false)\n            data.append('csstype', this.state.cssType)\n\n            // make api call - POST req - to the server \n            fetch('http://localhost:8082/', {\n                method: 'POST',\n                body: data,\n            }).then((response) => {\n                return response.json()\n            }).then((data) => {\n                this.setState({ submitError: false })\n                this.setState({ html: data })\n                \n                // handle any converter errors\n                if (this.state.html === 'error') {\n                    this.decCount() \n                    this.addErrorFileName(this.uploadInput.files[i].name)\n                    this.setState({ submitError: true })\n                    return\n                }\n\n                this.setState({ filename: newFileName })\n                this.decCount() \n                this.saveWithoutEdits() \n            }).catch((err) => {\n                this.decCount() \n                this.addErrorFileName(this.uploadInput.files[i].name)\n                this.setState({ submitError: true })\n                return\n            }).finally(() => {\n                if (this.state.count === 0) {\n                    this.setState({isLoading: false})\n                }\n            })\n        } \n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <main className=\"text-left mt-5 mb-5\"></main>\n                <div className=\"row\">\n                    <div className=\"col ml-5\">\n                        <form onSubmit={this.handleSubmit}>\n                            <div>\n                                <p className=\"errorStyle\">{this.state.submitError ? 'Oops! Something went wrong' : ''}</p>\n                                <p className=\"errorStyle\">{this.state.fileUploadErrorList.length > 1 ? this.state.fileUploadErrorList.length + ' files were not converted' : ''}</p>\n                                <p className=\"errorStyle\">{this.state.fileUploadErrorList.length === 1 ? this.state.fileUploadErrorList.length + ' file was not converted' : ''}</p>\n                                <p className=\"errorStyle\">{this.state.fileSelectedError ? 'Oops! Please select a file' : ''}</p>\n                                <p className=\"errorStyle\">{this.state.wrongFileTypeError ? 'Oops! Wrong file type. Only DOCX files are permitted' : ''}</p>\n                            </div>\n                            <div className=\"form-group\">\n                                <input className=\"my-1\" ref={(ref) => { this.uploadInput = ref; }} type=\"file\" accept=\".docx\" multiple/>\n                                <this.LoadingSpinner />\n                            </div>\n\n                            <div className=\"form-check my-3\">\n                                <div className=\"row\">\n                                    <div className=\"col\">\n                                        <input type=\"checkbox\" className=\"form-check-input\" onClick={this.handleTableOfContents}/>\n                                        <label className=\"form-check-label\">Create Table of Contents</label>\n                                        <sup><i className=\"fa fa-info-circle fa-lg ml-2 text-info\" onClick={() => this.handleShowModal('tocModal')} /></sup>\n                                    </div>\n                                    <Modal show={this.state.tocModal} onHide={() => this.closeModal('tocModal')}>\n                                        <Modal.Header>\n                                            <Modal.Title>Create Table of Contents</Modal.Title>\n                                        </Modal.Header>\n                                        <Modal.Body>\n                                            Creates a new Table of Contents from all of the header sections.\n                                            Dynamically creates hyperlinks to each header section so the user can jump to sections.\n                                                <br></br><br></br>\n                                            If the docx file does not have any Header 1 or Header 2 sections specified, no table of contents will be made.\n                                            </Modal.Body>\n                                        <Modal.Footer>\n                                            <Button variant=\"secondary\" onClick={() => this.closeModal('tocModal')}>\n                                                Close\n                                                </Button>\n                                        </Modal.Footer>\n                                    </Modal>\n                                </div> \n                            </div> \n\n                            <div className=\"form-check my-3\">\n                                <div className=\"row\">\n                                    <div className=\"col\">\n                                        <input type=\"checkbox\" className=\"form-check-input\" onClick={this.handleFTPLinks}/>\n                                        <label className=\"form-check-label\">Convert FTP Links to Drive</label>\n                                        <sup><i className=\"fa fa-info-circle fa-lg ml-2 text-info\" onClick={() => this.handleShowModal('ftpModal')} /></sup>\n                                    </div>\n                                    <Modal show={this.state.ftpModal} onHide={() => this.closeModal('ftpModal')}>\n                                        <Modal.Header>\n                                            <Modal.Title>Convert FTP Links to Drive</Modal.Title>\n                                        </Modal.Header>\n                                        <Modal.Body>\n                                            Converts all FTP links to the corresponding drive link.\n                                            Updates both the href and the visible link on the web page.\n                                            <br></br><br></br>\n                                            Does not convert any other references to FTP in the document outside of hyperlinks.\n                                            </Modal.Body>\n                                        <Modal.Footer>\n                                            <Button variant=\"secondary\" onClick={() => this.closeModal('ftpModal')}>\n                                                Close\n                                                </Button>\n                                        </Modal.Footer>\n                                    </Modal>\n                                </div>\n                            </div>\n\n                            <div className=\"form-check my-3\">\n                                <div className=\"row\">\n                                    <div className=\"col\">\n                                        <input type=\"checkbox\" className=\"form-check-input\" onClick={this.handleDoNLP} />\n                                        <label className=\"form-check-label\">Natural Language Processing</label>\n                                        <sup><i className=\"fa fa-info-circle fa-lg ml-2 text-info\" onClick={() => this.handleShowModal('nlpModal')} /></sup>\n                                    </div>\n                                    <Modal show={this.state.nlpModal} onHide={() => this.closeModal('nlpModal')}>\n                                        <Modal.Header>\n                                            <Modal.Title>Natural Language Processing</Modal.Title>\n                                        </Modal.Header>\n                                        <Modal.Body>\n                                            Runs various Natural Langage Processing algorithms to dynamically change content in the document.\n                                            <br></br><br></br>\n                                            Can change header section titles based on a list of keywords or phrases specified.\n                                            </Modal.Body>\n                                        <Modal.Footer>\n                                            <Button variant=\"secondary\" onClick={() => this.closeModal('nlpModal')}>\n                                                Close\n                                                </Button>\n                                        </Modal.Footer>\n                                    </Modal>\n                                </div>\n                            </div>\n\n                            <div className=\"form-check my-3\">\n                                <div className=\"row\">\n                                    <div className=\"col\" onChange={event => this.handleCSSType(event)}>\n                                        <input type=\"radio\" value=\"bootstrap\" name=\"cssStyle\" defaultChecked/> Bootstrap CSS\n                                        <input className=\"ml-3\" type=\"radio\" value=\"podaac\" name=\"cssStyle\"/> PODAAC CSS (beta)\n                                        <sup><i className=\"fa fa-info-circle fa-lg ml-2 text-info\" onClick={() => this.handleShowModal('cssModal')} /></sup>\n                                    </div>\n                                </div>\n                                <Modal show={this.state.cssModal} onHide={() => this.closeModal('cssModal')}>\n                                    <Modal.Header>\n                                        <Modal.Title>CSS Styling</Modal.Title>\n                                    </Modal.Header>\n                                    <Modal.Body>\n                                        Choose between Bootstrap 4 or PODAAC CSS styling. \n                                        <br></br><br></br>\n                                        <b>Bootstrap</b><br></br>\n                                        Adds header and footer. Adds bootstrap styling to img tags, table tags and adds a container tag. Adds link to Bootstrap CDN.\n                                        <br></br><br></br>\n                                        <b>PODAAC</b><br></br>\n                                        Adds header and footer. Adds links to all PODAAC CSS stylesheets.\n                                    </Modal.Body>\n                                    <Modal.Footer>\n                                        <Button variant=\"secondary\" onClick={() => this.closeModal('cssModal')}>\n                                            Close\n                                        </Button>\n                                    </Modal.Footer>\n                                </Modal>\n                            </div>\n                            <button className=\"btn btn-primary\">{this.state.isLoading ? 'Loading...' : 'Upload'}</button> \n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MainContent"]},"metadata":{},"sourceType":"module"}